{"version":3,"file":"sublevels.min.js","sources":["../src/sublevels.js"],"sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Template from 'core/templates';\n\n// The function called from the Mustache template to render the ADD_LEVEL modal\nexport const init_add = (contextid) => {\n    // Set up a SAVE_CANCEL modal.\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'Add Sublevel',\n        body: get_form(null, contextid),\n    })\n        // Set up the listeners\n        .then((modal) => {\n            document.addEventListener('click', (event) => {\n                if (\n                    event.target &&\n                    event.target.classList.contains('add_sublevel')\n                ) {\n                    showModal(event, modal);\n                }\n            });\n\n            const root = modal.getRoot();\n            const form = root.find('form');\n\n            root.on(ModalEvents.save, (event) => submitForm(event, form));\n            form.on('submit', (event) =>\n                submitAddFormAjax(event, modal, form, contextid)\n            );\n        })\n        // Close modal\n        .then((modal) => {\n            modal.close();\n        });\n};\n\nconst showModal = (event, modal) => {\n    event.preventDefault();\n    let root = modal.getRoot();\n    modal.show();\n    // Adds chapter ID to invoked modal form so we can save to DB\n    root.find('form')\n        .find('input[name=\"chapterid\"]')\n        .val(event.target.parentNode.dataset.cid);\n\n    // Adds parentlevel ID to invoked modal form so we can save to DB\n    root.find('form')\n        .find('input[name=\"parentlevelid\"]')\n        .val(event.target.parentNode.dataset.plid);\n};\n\nconst get_form = (formdata, contextid) => {\n    if (typeof formdata === 'undefined') {\n        formdata = {};\n    }\n    var params = { jsonformdata: JSON.stringify(formdata) };\n    return Fragment.loadFragment(\n        'block_mission_map',\n        'sublevel_form',\n        contextid,\n        params\n    );\n};\n\nconst submitForm = (event, form) => {\n    event.preventDefault();\n    form.submit();\n};\n\nconst submitAddFormAjax = (event, modal, form, contextid) => {\n    event.preventDefault();\n\n    let formData = form.serialize();\n    Ajax.call([\n        {\n            methodname: 'block_mission_map_create_sublevel',\n            args: {\n                contextid: contextid,\n                jsonformdata: JSON.stringify(formData),\n            },\n            done: (data) => handleAddFormSubmissionResponse(data, modal),\n            fail: (data) => handleFormSubmissionFailure(data, modal),\n        },\n    ]);\n};\n\nconst handleFormSubmissionFailure = (data, modal) => {\n    modal.hide();\n    Notification.alert('Warning', JSON.parse(data), 'Continue');\n};\n\nconst handleAddFormSubmissionResponse = (data, modal) => {\n    let level = JSON.parse(data.data);\n    let context = {\n        id: level.id,\n        chapterid: level.chapterid,\n        name: level.name,\n        url: level.url,\n    };\n\n    const chapter = document.querySelector(`[data-cid=\"${level.chapterid}\"]`);\n\n    Template.render('block_mission_map/dot', context)\n        .then((html, js) => {\n            Template.appendNodeContents(chapter, html, js);\n            modal.hide();\n        })\n        .fail((ex) => {\n            Notification.alert('Warning', ex, 'Continue');\n        });\n};\n"],"names":["contextid","create","type","ModalFactory","types","SAVE_CANCEL","title","body","get_form","then","modal","document","addEventListener","event","target","classList","contains","showModal","root","getRoot","form","find","on","ModalEvents","save","submitForm","submitAddFormAjax","close","preventDefault","show","val","parentNode","dataset","cid","plid","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","submit","formData","serialize","call","methodname","args","done","data","handleAddFormSubmissionResponse","fail","handleFormSubmissionFailure","hide","alert","parse","level","context","id","chapterid","name","url","chapter","querySelector","render","html","js","appendNodeContents","ex"],"mappings":"ssBAQyBA,mCAERC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,MAAO,eACPC,KAAMC,SAAS,KAAMR,aAGpBS,MAAMC,QACHC,SAASC,iBAAiB,SAAUC,QAE5BA,MAAMC,QACND,MAAMC,OAAOC,UAAUC,SAAS,iBAEhCC,UAAUJ,MAAOH,gBAInBQ,KAAOR,MAAMS,UACbC,KAAOF,KAAKG,KAAK,QAEvBH,KAAKI,GAAGC,sBAAYC,MAAOX,OAAUY,WAAWZ,MAAOO,QACvDA,KAAKE,GAAG,UAAWT,OACfa,kBAAkBb,MAAOH,MAAOU,KAAMpB,gBAI7CS,MAAMC,QACHA,MAAMiB,kBAIZV,UAAY,CAACJ,MAAOH,SACtBG,MAAMe,qBACFV,KAAOR,MAAMS,UACjBT,MAAMmB,OAENX,KAAKG,KAAK,QACLA,KAAK,2BACLS,IAAIjB,MAAMC,OAAOiB,WAAWC,QAAQC,KAGzCf,KAAKG,KAAK,QACLA,KAAK,+BACLS,IAAIjB,MAAMC,OAAOiB,WAAWC,QAAQE,OAGvC1B,SAAW,CAAC2B,SAAUnC,kBACA,IAAbmC,WACPA,SAAW,QAEXC,OAAS,CAAEC,aAAcC,KAAKC,UAAUJ,kBACrCK,kBAASC,aACZ,oBACA,gBACAzC,UACAoC,SAIFX,WAAa,CAACZ,MAAOO,QACvBP,MAAMe,iBACNR,KAAKsB,UAGHhB,kBAAoB,CAACb,MAAOH,MAAOU,KAAMpB,aAC3Ca,MAAMe,qBAEFe,SAAWvB,KAAKwB,0BACfC,KAAK,CACN,CACIC,WAAY,oCACZC,KAAM,CACF/C,UAAWA,UACXqC,aAAcC,KAAKC,UAAUI,WAEjCK,KAAOC,MAASC,gCAAgCD,KAAMvC,OACtDyC,KAAOF,MAASG,4BAA4BH,KAAMvC,WAKxD0C,4BAA8B,CAACH,KAAMvC,SACvCA,MAAM2C,6BACOC,MAAM,UAAWhB,KAAKiB,MAAMN,MAAO,aAG9CC,gCAAkC,CAACD,KAAMvC,aACvC8C,MAAQlB,KAAKiB,MAAMN,KAAKA,MACxBQ,QAAU,CACVC,GAAIF,MAAME,GACVC,UAAWH,MAAMG,UACjBC,KAAMJ,MAAMI,KACZC,IAAKL,MAAMK,WAGTC,QAAUnD,SAASoD,mCAA4BP,MAAMG,oCAElDK,OAAO,wBAAyBP,SACpChD,MAAK,CAACwD,KAAMC,yBACAC,mBAAmBL,QAASG,KAAMC,IAC3CxD,MAAM2C,UAETF,MAAMiB,2BACUd,MAAM,UAAWc,GAAI"}