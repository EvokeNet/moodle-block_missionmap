{"version":3,"sources":["../src/sublevels.js"],"names":["init_add","contextid","ModalFactory","create","type","types","SAVE_CANCEL","title","body","get_form","then","modal","document","addEventListener","event","target","classList","contains","showModal","root","getRoot","form","find","on","ModalEvents","save","submitForm","submitAddFormAjax","close","preventDefault","show","val","parentNode","dataset","cid","plid","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","submit","formData","serialize","Ajax","call","methodname","args","done","data","handleAddFormSubmissionResponse","fail","handleFormSubmissionFailure","hide","Notification","alert","parse","level","context","id","chapterid","name","url","chapter","querySelector","Template","render","html","js","appendNodeContents","ex"],"mappings":"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","sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Template from 'core/templates';\n\n// The function called from the Mustache template to render the ADD_LEVEL modal\nexport const init_add = (contextid) => {\n    // Set up a SAVE_CANCEL modal.\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'Add Sublevel',\n        body: get_form(null, contextid),\n    })\n        // Set up the listeners\n        .then((modal) => {\n            document.addEventListener('click', (event) => {\n                if (\n                    event.target &&\n                    event.target.classList.contains('add_sublevel')\n                ) {\n                    showModal(event, modal);\n                }\n            });\n            // document.addEventListener('mousedown', (event) => {\n            //     if (\n            //         event.target &&\n            //         event.target.classList.contains('mission')\n            //     ) {\n            //         dragstart(event, event.target, contextid);\n            //     }\n            // });\n            const root = modal.getRoot();\n            const form = root.find('form');\n\n            // Adds dragging event listeners to all missions already added to the DOM\n            // for (let i = 0; i < missions.length; i++) {\n            //     missions[i].addEventListener('mousedown', (event) =>\n            //         dragstart(event, missions[i], contextid)\n            //     );\n            // }\n\n            root.on(ModalEvents.save, (event) => submitForm(event, form));\n            form.on('submit', (event) =>\n                submitAddFormAjax(event, modal, form, contextid)\n            );\n        })\n        // Close modal\n        .then((modal) => {\n            modal.close();\n        });\n};\n\n// The function called from the Mustache template to render the EDIT_LEVEL modal\n// export const init_edit = (contextid) => {\n//     document.addEventListener('click', (event) => {\n//         if (event.target && event.target.classList.contains('edit_level')) {\n//             create_modal(event, contextid);\n//         }\n//     });\n// };\n\n// Assembles EDIT_LEVEL modal with prefilled data\n// const create_modal = (event, contextid) => {\n//     // Pass data to the modal\n//     const formdata = {\n//         chapterid: event.target.parentNode.parentNode.dataset.cid,\n//         levelid: event.target.dataset.lid,\n//     };\n\n//     // Set up a SAVE_CANCEL modal.\n//     ModalFactory.create({\n//         type: ModalFactory.types.SAVE_CANCEL,\n//         title: 'Edit Level',\n//         body: get_form(formdata, contextid),\n//     })\n//         // Set up the modal events\n//         .then((modal) => {\n//             const root = modal.getRoot();\n//             const form = root.find('form');\n\n//             root.on(ModalEvents.save, (event) => submitForm(event, form));\n//             form.on('submit', (event) =>\n//                 submitEditFormAjax(event, modal, form, contextid)\n//             );\n\n//             modal.show();\n//         })\n//         // Close modal\n//         .then((modal) => {\n//             modal.close();\n//         });\n// };\n\nconst showModal = (event, modal) => {\n    event.preventDefault();\n    let root = modal.getRoot();\n    modal.show();\n    // Adds chapter ID to invoked modal form so we can save to DB\n    root.find('form')\n        .find('input[name=\"chapterid\"]')\n        .val(event.target.parentNode.dataset.cid);\n\n    // Adds parentlevel ID to invoked modal form so we can save to DB\n    root.find('form')\n        .find('input[name=\"parentlevelid\"]')\n        .val(event.target.parentNode.dataset.plid);\n};\n\nconst get_form = (formdata, contextid) => {\n    if (typeof formdata === 'undefined') {\n        formdata = {};\n    }\n    var params = { jsonformdata: JSON.stringify(formdata) };\n    return Fragment.loadFragment(\n        'block_mission_map',\n        'sublevel_form',\n        contextid,\n        params\n    );\n};\n\nconst submitForm = (event, form) => {\n    event.preventDefault();\n    form.submit();\n};\n\nconst submitAddFormAjax = (event, modal, form, contextid) => {\n    event.preventDefault();\n\n    let formData = form.serialize();\n    Ajax.call([\n        {\n            methodname: 'block_mission_map_create_sublevel',\n            args: {\n                contextid: contextid,\n                jsonformdata: JSON.stringify(formData),\n            },\n            done: (data) => handleAddFormSubmissionResponse(data, modal),\n            fail: (data) => handleFormSubmissionFailure(data, modal),\n        },\n    ]);\n};\n\n// const submitEditFormAjax = (event, modal, form, contextid) => {\n//     event.preventDefault();\n\n//     let formData = form.serialize();\n//     Ajax.call([\n//         {\n//             methodname: 'block_mission_map_edit_level',\n//             args: {\n//                 contextid: contextid,\n//                 jsonformdata: JSON.stringify(formData),\n//             },\n//             done: (data) => handleEditFormSubmissionResponse(data, modal),\n//             fail: (data) => handleFormSubmissionFailure(data, modal),\n//         },\n//     ]);\n// };\n\nconst handleFormSubmissionFailure = (data, modal) => {\n    modal.hide();\n    Notification.alert('Warning', JSON.parse(data), 'Continue');\n};\n\n/**\n *   level {\n *       id: 0,\n *       chapterid: 0,\n *       parentlevelid: 0,\n *       name: 'LevelName',\n *       url: 'https://levelurl',\n *       timecreated: 0000000000,\n *       timemodified: 0000000000\n *   }\n **/\nconst handleAddFormSubmissionResponse = (data, modal) => {\n    let level = JSON.parse(data.data);\n    let context = {\n        id: level.id,\n        chapterid: level.chapterid,\n        name: level.name,\n        url: level.url,\n    };\n\n    const chapter = document.querySelector(`[data-cid=\"${level.chapterid}\"]`);\n\n    Template.render('block_mission_map/dot', context)\n        .then((html, js) => {\n            Template.appendNodeContents(chapter, html, js);\n            modal.hide();\n        })\n        .fail((ex) => {\n            Notification.alert('Warning', ex, 'Continue');\n        });\n};\n\n// const handleEditFormSubmissionResponse = (data, modal) => {\n//     let level_data = JSON.parse(data.data);\n//     const level = document.querySelector(`[data-lid=\"${level_data.levelid}\"]`);\n//     level.href = level_data.url;\n//     modal.hide();\n// };\n\n/* eslint-disable */\n// const dragstart = (event, element) => {\n//     event.preventDefault();\n\n//     element.classList.add('dimmed');\n//     element.style.cursor = 'move';\n\n//     let cOffX = event.clientX - element.offsetLeft;\n//     let cOffY = event.clientY - element.offsetTop;\n\n//     element.onmousemove = (event) => {\n//         element.style.top = (event.clientY - cOffY).toString() + 'px';\n//         element.style.left = (event.clientX - cOffX).toString() + 'px';\n//     };\n\n//     document.onmouseup = () => {\n//         element.onmousemove = null;\n//         element.style.cursor = 'pointer';\n//         element.classList.remove('dimmed');\n\n// const level_edit_form = $('.block_mission_map_level_edit_form');\n// document.getElementById('levelid').value = element.dataset.lid;\n// document.getElementById('chapterid').value =\n//     element.parentNode.dataset.cid;\n// document.getElementById('posx').value = element.style.top;\n// document.getElementById('posy').value = element.style.left;\n// submitLevelEditFormAjax(level_edit_form, contextid);\n//     };\n\n//     element.ondragstart = () => {\n//         return false;\n//     };\n// };\n\n// const submitLevelEditFormAjax = (form, contextid) => {\n//     let formData = form.serialize();\n//     Ajax.call([\n//         {\n//             methodname: 'block_mission_map_edit_level',\n//             args: {\n//                 contextid: contextid,\n//                 jsonformdata: JSON.stringify(formData),\n//             },\n//             done: (data) => handleLevelEditFormSubmissionResponse(data),\n//             fail: (data) => handleLevelEditFormSubmissionFailure(data),\n//         },\n//     ]);\n// };\n\n// const handleLevelEditFormSubmissionFailure = (data) => {\n//     Notification.alert('Warning', JSON.stringify(data), 'Continue');\n//     return false;\n// };\n\n// const handleLevelEditFormSubmissionResponse = (data) => {\n//     Notification.alert('Success', data, 'Continue');\n// };\n/* eslint-enable */\n"],"file":"sublevels.min.js"}