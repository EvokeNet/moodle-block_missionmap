{"version":3,"sources":["../src/levels.js"],"names":["init","params","contextid","blockid","courseid","sections","document","addEventListener","event","target","classList","contains","preventDefault","create_modal","formdata","chapterid","dataset","cid","ModalFactory","create","type","types","SAVE_CANCEL","title","body","get_form","then","modal","root","getRoot","form","find","on","ModalEvents","save","submitForm","submitFormAjax","show","close","jsonformdata","JSON","stringify","Fragment","loadFragment","submit","formData","serialize","Ajax","call","methodname","args","done","data","handleFormSubmissionResponse","fail","handleFormSubmissionFailure","Notification","alert","backtrace","hide","level","parse","context","id","name","url","chapter","querySelector","Template","render","html","js","appendNodeContents","ex"],"mappings":"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","sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Template from 'core/templates';\n\n// The function called from the Mustache template.\nexport const init = (params) => {\n    const { contextid, blockid, courseid, sections } = params;\n\n    document.addEventListener('click', (event) => {\n        if (event.target && event.target.classList.contains('add_level')) {\n            event.preventDefault();\n            create_modal(event, contextid, blockid, courseid, sections);\n        }\n    });\n};\n\n// The function called from the Mustache template to render the ADD_LEVEL modal\nconst create_modal = (event, contextid, blockid, courseid, sections) => {\n    const formdata = {\n        chapterid: event.target.dataset.cid,\n        blockid: blockid,\n        courseid: courseid,\n        sections: sections,\n    };\n\n    // Set up a SAVE_CANCEL modal.\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'Add Level',\n        body: get_form(formdata, contextid),\n    })\n        // Set up the listeners\n        .then((modal) => {\n            const root = modal.getRoot();\n            const form = root.find('form');\n\n            root.on(ModalEvents.save, (event) => submitForm(event, form));\n            form.on('submit', (event) =>\n                submitFormAjax(event, modal, form, contextid)\n            );\n            modal.show();\n        })\n        // Close modal\n        .then((modal) => {\n            modal.close();\n        });\n};\n\nconst get_form = (formdata, contextid) => {\n    if (typeof formdata === 'undefined') {\n        formdata = {};\n    }\n    var params = { jsonformdata: JSON.stringify(formdata) };\n    return Fragment.loadFragment(\n        'block_mission_map',\n        'level_form',\n        contextid,\n        params\n    );\n};\n\nconst submitForm = (event, form) => {\n    event.preventDefault();\n    form.submit();\n};\n\nconst submitFormAjax = (event, modal, form, contextid) => {\n    event.preventDefault();\n\n    let formData = form.serialize();\n    Ajax.call([\n        {\n            methodname: 'block_mission_map_create_level',\n            args: {\n                contextid: contextid,\n                jsonformdata: JSON.stringify(formData),\n            },\n            done: (data) => handleFormSubmissionResponse(data, modal),\n            fail: (data) => handleFormSubmissionFailure(data, modal),\n        },\n    ]);\n};\n\nconst handleFormSubmissionFailure = (data, modal) => {\n    Notification.alert('Warning', data.backtrace, 'Continue');\n    modal.hide();\n};\n\n/**\n *   level {\n *       id: 0,\n *       chapterid: 0,\n *       parentlevelid: 0,\n *       name: 'LevelName',\n *       url: 'https://levelurl',\n *       timecreated: 0000000000,\n *       timemodified: 0000000000\n *   }\n **/\nconst handleFormSubmissionResponse = (data, modal) => {\n    let level = JSON.parse(data.data);\n    let context = {\n        id: level.id,\n        chapterid: level.chapterid,\n        name: level.name,\n        url: level.url,\n    };\n\n    const chapter = document.querySelector(`[data-cid=\"${level.chapterid}\"]`);\n\n    Template.render('block_mission_map/dot', context)\n        .then((html, js) => {\n            Template.appendNodeContents(chapter, html, js);\n            modal.hide();\n        })\n        .fail((ex) => {\n            Notification.alert('Warning', ex, 'Continue');\n        });\n};\n"],"file":"levels.min.js"}