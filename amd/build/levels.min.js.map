{"version":3,"sources":["../src/levels.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Notification","Template","CreateLevel","params","contextid","blockid","courseid","sections","document","addEventListener","event","target","classList","contains","id","preventDefault","init","prototype","modal","formdata","chapterid","dataset","cid","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","show","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","data","level","parse","context","name","url","chapter","querySelector","render","html","js","appendNodeContents","hide","fail","ex","alert","handleFormSubmissionFailure","e","changeEvent","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","submit"],"mappings":"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","sourcesContent":["/* eslint-disable */\ndefine([\n    'jquery',\n    'core/str',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/fragment',\n    'core/ajax',\n    'core/notification',\n    'core/templates',\n], function (\n    $,\n    Str,\n    ModalFactory,\n    ModalEvents,\n    Fragment,\n    Ajax,\n    Notification,\n    Template\n) {\n    var CreateLevel = function (params) {\n        const { contextid, blockid, courseid, sections } = params;\n\n        this.contextid = contextid;\n\n        document.addEventListener('click', (event) => {\n            if (\n                (event.target &&\n                    event.target.classList.contains('add_level')) ||\n                event.target.id == 'add_level'\n            ) {\n                event.preventDefault();\n\n                this.init(event, blockid, courseid, sections);\n            }\n        });\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    CreateLevel.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    CreateLevel.prototype.contextid = -1;\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    CreateLevel.prototype.modal = null;\n\n    CreateLevel.prototype.init = function (event, blockid, courseid, sections) {\n        const formdata = {\n            chapterid: event.target.dataset.cid,\n            blockid: blockid,\n            courseid: courseid,\n            sections: sections,\n        };\n\n        return Str.get_string('add_level', 'block_mission_map')\n            .then(\n                function (title) {\n                    // Create the modal.\n                    return ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: title,\n                        body: this.getBody(formdata),\n                    });\n                }.bind(this)\n            )\n            .then(\n                function (modal) {\n                    // Keep a reference to the modal.\n                    this.modal = modal;\n\n                    // We want to reset the form every time it is opened.\n                    this.modal.getRoot().on(\n                        ModalEvents.hidden,\n                        function () {\n                            this.modal.setBody(this.getBody(formdata));\n                        }.bind(this)\n                    );\n\n                    // We want to hide the submit buttons every time it is opened.\n                    this.modal.getRoot().on(\n                        ModalEvents.shown,\n                        function () {\n                            this.modal\n                                .getRoot()\n                                .append(\n                                    '<style>[data-fieldtype=submit] { display: none ! important; }</style>'\n                                );\n                        }.bind(this)\n                    );\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    this.modal\n                        .getRoot()\n                        .on(ModalEvents.save, this.submitForm.bind(this));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    this.modal\n                        .getRoot()\n                        .on('submit', 'form', this.submitFormAjax.bind(this));\n\n                    this.modal.show();\n\n                    return this.modal;\n                }.bind(this)\n            );\n    };\n\n    CreateLevel.prototype.getBody = function (formdata) {\n        if (typeof formdata === 'undefined') {\n            formdata = {};\n        }\n\n        // Get the content of the modal.\n        var params = { jsonformdata: JSON.stringify(formdata) };\n\n        return Fragment.loadFragment(\n            'block_mission_map',\n            'level_form',\n            this.contextid,\n            params\n        );\n    };\n\n    CreateLevel.prototype.handleFormSubmissionResponse = function (data) {\n        let level = JSON.parse(data.data);\n        let context = {\n            id: level.id,\n            chapterid: level.chapterid,\n            name: level.name,\n            url: level.url,\n        };\n\n        const chapter = document.querySelector(\n            `[data-cid=\"${level.chapterid}\"]`\n        );\n\n        Template.render('block_mission_map/dot', context)\n            .then((html, js) => {\n                Template.appendNodeContents(chapter, html, js);\n                this.modal.hide();\n            })\n            .fail((ex) => {\n                Notification.alert('Warning', ex, 'Continue');\n            });\n\n        this.modal.hide();\n    };\n\n    CreateLevel.prototype.handleFormSubmissionFailure = function (data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     *\n     * @private\n     *\n     * @param {Event} e Form submission event.\n     */\n    CreateLevel.prototype.submitFormAjax = function (e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        var changeEvent = document.createEvent('HTMLEvents');\n        changeEvent.initEvent('change', true, true);\n\n        // Prompt all inputs to run their validation functions.\n        // Normally this would happen when the form is submitted, but\n        // since we aren't submitting the form normally we need to run client side\n        // validation.\n        this.modal\n            .getRoot()\n            .find(':input')\n            .each(function (index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        var invalid = $.merge(\n            this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n            this.modal.getRoot().find('.error')\n        );\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return;\n        }\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([\n            {\n                methodname: 'block_mission_map_create_level',\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData),\n                },\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData),\n            },\n        ]);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    CreateLevel.prototype.submitForm = function (e) {\n        e.preventDefault();\n\n        this.modal.getRoot().find('form').submit();\n    };\n\n    return {\n        init: function (params) {\n            return new CreateLevel(params);\n        },\n    };\n});\n"],"file":"levels.min.js"}