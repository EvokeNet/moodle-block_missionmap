{"version":3,"sources":["../src/levels.js"],"names":["init","contextid","ModalFactory","create","type","types","SAVE_CANCEL","title","body","get_form","then","modal","triggers","document","querySelectorAll","root","getRoot","form","find","i","length","addEventListener","event","showModal","on","ModalEvents","save","submitForm","submitFormAjax","close","preventDefault","show","val","target","parentNode","dataset","cid","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","submit","formData","serialize","Ajax","call","methodname","args","done","data","handleFormSubmissionResponse","fail","handleFormSubmissionFailure","hide","Notification","alert","parse","level","context","id","chapterid","name","url","chapter","Template","render","html","js","appendNodeContents","ex"],"mappings":"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","sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Template from 'core/templates';\n\n// The function called from the Mustache template.\nexport const init = (contextid) => {\n    // Set up a SAVE_CANCEL modal.\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'Add Level',\n        body: get_form(null, contextid)\n    })\n    // Set up the listeners\n    .then(modal => {\n        const triggers = document.querySelectorAll('.add_level');\n        const root = modal.getRoot();\n        const form = root.find('form');\n        for (let i = 0; i < triggers.length; i++) {\n            triggers[i].addEventListener('click', (event) => showModal(event, modal));\n        }\n        root.on(ModalEvents.save, (event) => submitForm(event, form));\n        form.on('submit', (event) => submitFormAjax(event, modal, form, contextid));\n\n    })\n    // Close modal\n    .then(modal => {\n        modal.close();\n    });\n};\n\nconst showModal = (event, modal) => {\n    event.preventDefault();\n    let root = modal.getRoot();\n    modal.show();\n    // Adds chapter ID to invoked modal form so we can save to DB\n    root.find('form').find('input[name=\"chapterid\"]').val(event.target.parentNode.dataset.cid);\n};\n\nconst get_form = (formdata, contextid) => {\n    if (typeof formdata === \"undefined\") {\n        formdata = {};\n    }\n    var params = {jsonformdata: JSON.stringify(formdata)};\n    return Fragment.loadFragment(\n        'block_mission_map',\n        'level_form',\n        contextid,\n        params\n    );\n};\n\nconst submitForm = (event, form) => {\n    event.preventDefault();\n    form.submit();\n};\n\nconst submitFormAjax = (event, modal, form, contextid) => {\n    event.preventDefault();\n\n    let formData = form.serialize();\n    Ajax.call([{\n        methodname: 'block_mission_map_create_level',\n        args: {contextid: contextid, jsonformdata: JSON.stringify(formData)},\n        done: (data) => handleFormSubmissionResponse(data, modal),\n        fail: (data) => handleFormSubmissionFailure(data, modal),\n    }]);\n};\n\nconst handleFormSubmissionFailure = (data, modal) => {\n    modal.hide();\n    Notification.alert('Warning', JSON.parse(data), 'Continue');\n };\n\n /**\n*   level {\n*       id: 0,\n*       chapterid: 0,\n*       parentlevelid: 0,\n*       name: 'LevelName',\n*       url: 'https://levelurl',\n*       timecreated: 0000000000,\n*       timemodified: 0000000000\n*   }\n**/\nconst handleFormSubmissionResponse = (data, modal) => {\n    let level = JSON.parse(data.data);\n    let context = {\n        id: level.id,\n        chapterid: level.chapterid,\n        name: level.name,\n        url: level.url\n    };\n\n    const chapter = document.querySelectorAll(`[data-cid=\"${level.chapterid}\"]`);\n\n    Template\n    .render('block_mission_map/level', context)\n    .then((html, js) => {\n        Template.appendNodeContents(chapter, html, js);\n        modal.hide();\n    })\n    .fail((ex) => {\n        Notification.alert('Warning', ex, 'Continue');\n    });\n};"],"file":"levels.min.js"}