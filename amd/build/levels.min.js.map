{"version":3,"sources":["../src/levels.js"],"names":["init_add","contextid","ModalFactory","create","type","types","SAVE_CANCEL","title","body","get_form","then","modal","document","addEventListener","event","target","classList","contains","showModal","triggers","querySelectorAll","root","getRoot","form","find","i","length","on","ModalEvents","save","submitForm","submitAddFormAjax","close","init_edit","create_modal","formdata","chapterid","parentNode","dataset","cid","levelid","lid","submitEditFormAjax","show","preventDefault","val","params","jsonformdata","JSON","stringify","Fragment","loadFragment","submit","formData","serialize","Ajax","call","methodname","args","done","data","handleAddFormSubmissionResponse","fail","handleFormSubmissionFailure","handleEditFormSubmissionResponse","hide","Notification","alert","parse","level","context","id","name","url","chapter","querySelector","Template","render","html","js","appendNodeContents","ex","level_data","href"],"mappings":"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","sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Template from 'core/templates';\n\n// The function called from the Mustache template to render the ADD_LEVEL modal\nexport const init_add = (contextid) => {\n    // Set up a SAVE_CANCEL modal.\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'Add Level',\n        body: get_form(null, contextid),\n    })\n        // Set up the listeners\n        .then((modal) => {\n            document.addEventListener('click', (event) => {\n                if (\n                    event.target &&\n                    event.target.classList.contains('add_level')\n                ) {\n                    showModal(event, modal);\n                }\n            });\n            // document.addEventListener('mousedown', (event) => {\n            //     if (\n            //         event.target &&\n            //         event.target.classList.contains('mission')\n            //     ) {\n            //         dragstart(event, event.target, contextid);\n            //     }\n            // });\n            const triggers = document.querySelectorAll('.add_level');\n            const root = modal.getRoot();\n            const form = root.find('form');\n\n            // Adds click event listeners to all buttons already added to the DOM\n            for (let i = 0; i < triggers.length; i++) {\n                triggers[i].addEventListener('click', (event) =>\n                    showModal(event, modal)\n                );\n            }\n\n            // Adds dragging event listeners to all missions already added to the DOM\n            // for (let i = 0; i < missions.length; i++) {\n            //     missions[i].addEventListener('mousedown', (event) =>\n            //         dragstart(event, missions[i], contextid)\n            //     );\n            // }\n\n            root.on(ModalEvents.save, (event) => submitForm(event, form));\n            form.on('submit', (event) =>\n                submitAddFormAjax(event, modal, form, contextid)\n            );\n        })\n        // Close modal\n        .then((modal) => {\n            modal.close();\n        });\n};\n\n// The function called from the Mustache template to render the EDIT_LEVEL modal\nexport const init_edit = (contextid) => {\n    document.addEventListener('click', (event) => {\n        if (event.target && event.target.classList.contains('edit_level')) {\n            create_modal(event, contextid);\n        }\n    });\n};\n\n// Assembles EDIT_LEVEL modal with prefilled data\nconst create_modal = (event, contextid) => {\n    // Pass data to the modal\n    const formdata = {\n        chapterid: event.target.parentNode.parentNode.dataset.cid,\n        levelid: event.target.dataset.lid,\n    };\n\n    // Set up a SAVE_CANCEL modal.\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'Edit Level',\n        body: get_form(formdata, contextid),\n    })\n        // Set up the modal events\n        .then((modal) => {\n            const root = modal.getRoot();\n            const form = root.find('form');\n\n            root.on(ModalEvents.save, (event) => submitForm(event, form));\n            form.on('submit', (event) =>\n                submitEditFormAjax(event, modal, form, contextid)\n            );\n\n            modal.show();\n        })\n        // Close modal\n        .then((modal) => {\n            modal.close();\n        });\n};\n\nconst showModal = (event, modal) => {\n    event.preventDefault();\n    let root = modal.getRoot();\n    modal.show();\n    // Adds chapter ID to invoked modal form so we can save to DB\n    root.find('form')\n        .find('input[name=\"chapterid\"]')\n        .val(event.target.parentNode.dataset.cid);\n};\n\nconst get_form = (formdata, contextid) => {\n    if (typeof formdata === 'undefined') {\n        formdata = {};\n    }\n    var params = { jsonformdata: JSON.stringify(formdata) };\n    return Fragment.loadFragment(\n        'block_mission_map',\n        'level_form',\n        contextid,\n        params\n    );\n};\n\nconst submitForm = (event, form) => {\n    event.preventDefault();\n    form.submit();\n};\n\nconst submitAddFormAjax = (event, modal, form, contextid) => {\n    event.preventDefault();\n\n    let formData = form.serialize();\n    Ajax.call([\n        {\n            methodname: 'block_mission_map_create_level',\n            args: {\n                contextid: contextid,\n                jsonformdata: JSON.stringify(formData),\n            },\n            done: (data) => handleAddFormSubmissionResponse(data, modal),\n            fail: (data) => handleFormSubmissionFailure(data, modal),\n        },\n    ]);\n};\n\nconst submitEditFormAjax = (event, modal, form, contextid) => {\n    event.preventDefault();\n\n    let formData = form.serialize();\n    Ajax.call([\n        {\n            methodname: 'block_mission_map_edit_level',\n            args: {\n                contextid: contextid,\n                jsonformdata: JSON.stringify(formData),\n            },\n            done: (data) => handleEditFormSubmissionResponse(data, modal),\n            fail: (data) => handleFormSubmissionFailure(data, modal),\n        },\n    ]);\n};\n\nconst handleFormSubmissionFailure = (data, modal) => {\n    modal.hide();\n    Notification.alert('Warning', JSON.parse(data), 'Continue');\n};\n\n/**\n *   level {\n *       id: 0,\n *       chapterid: 0,\n *       parentlevelid: 0,\n *       name: 'LevelName',\n *       url: 'https://levelurl',\n *       timecreated: 0000000000,\n *       timemodified: 0000000000\n *   }\n **/\nconst handleAddFormSubmissionResponse = (data, modal) => {\n    let level = JSON.parse(data.data);\n    let context = {\n        id: level.id,\n        chapterid: level.chapterid,\n        name: level.name,\n        url: level.url,\n    };\n\n    const chapter = document.querySelector(`[data-cid=\"${level.chapterid}\"]`);\n\n    Template.render('block_mission_map/dot', context)\n        .then((html, js) => {\n            Template.appendNodeContents(chapter, html, js);\n            modal.hide();\n        })\n        .fail((ex) => {\n            Notification.alert('Warning', ex, 'Continue');\n        });\n};\n\nconst handleEditFormSubmissionResponse = (data, modal) => {\n    let level_data = JSON.parse(data.data);\n    const level = document.querySelector(`[data-lid=\"${level_data.levelid}\"]`);\n    level.href = level_data.url;\n    modal.hide();\n};\n\n/* eslint-disable */\n// const dragstart = (event, element) => {\n//     event.preventDefault();\n\n//     element.classList.add('dimmed');\n//     element.style.cursor = 'move';\n\n//     let cOffX = event.clientX - element.offsetLeft;\n//     let cOffY = event.clientY - element.offsetTop;\n\n//     element.onmousemove = (event) => {\n//         element.style.top = (event.clientY - cOffY).toString() + 'px';\n//         element.style.left = (event.clientX - cOffX).toString() + 'px';\n//     };\n\n//     document.onmouseup = () => {\n//         element.onmousemove = null;\n//         element.style.cursor = 'pointer';\n//         element.classList.remove('dimmed');\n\n// const level_edit_form = $('.block_mission_map_level_edit_form');\n// document.getElementById('levelid').value = element.dataset.lid;\n// document.getElementById('chapterid').value =\n//     element.parentNode.dataset.cid;\n// document.getElementById('posx').value = element.style.top;\n// document.getElementById('posy').value = element.style.left;\n// submitLevelEditFormAjax(level_edit_form, contextid);\n//     };\n\n//     element.ondragstart = () => {\n//         return false;\n//     };\n// };\n\n// const submitLevelEditFormAjax = (form, contextid) => {\n//     let formData = form.serialize();\n//     Ajax.call([\n//         {\n//             methodname: 'block_mission_map_edit_level',\n//             args: {\n//                 contextid: contextid,\n//                 jsonformdata: JSON.stringify(formData),\n//             },\n//             done: (data) => handleLevelEditFormSubmissionResponse(data),\n//             fail: (data) => handleLevelEditFormSubmissionFailure(data),\n//         },\n//     ]);\n// };\n\n// const handleLevelEditFormSubmissionFailure = (data) => {\n//     Notification.alert('Warning', JSON.stringify(data), 'Continue');\n//     return false;\n// };\n\n// const handleLevelEditFormSubmissionResponse = (data) => {\n//     Notification.alert('Success', data, 'Continue');\n// };\n/* eslint-enable */\n"],"file":"levels.min.js"}