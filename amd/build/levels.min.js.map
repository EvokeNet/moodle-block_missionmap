{"version":3,"sources":["../src/levels.js"],"names":["init","contextid","ModalFactory","create","type","types","SAVE_CANCEL","title","body","get_form","then","modal","document","addEventListener","event","target","classList","contains","showModal","triggers","querySelectorAll","root","getRoot","form","find","i","length","on","ModalEvents","save","submitForm","submitFormAjax","close","preventDefault","show","val","parentNode","dataset","cid","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","submit","formData","serialize","Ajax","call","methodname","args","done","data","handleFormSubmissionResponse","fail","handleFormSubmissionFailure","hide","Notification","alert","parse","level","context","id","chapterid","name","url","chapter","querySelector","Template","render","html","js","appendNodeContents","ex"],"mappings":"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","sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Template from 'core/templates';\n\n// The function called from the Mustache template.\nexport const init = (contextid) => {\n    // Set up a SAVE_CANCEL modal.\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'Add Level',\n        body: get_form(null, contextid),\n    })\n        // Set up the listeners\n        .then((modal) => {\n            document.addEventListener('click', (event) => {\n                if (\n                    event.target &&\n                    event.target.classList.contains('add_level')\n                ) {\n                    showModal(event, modal);\n                }\n            });\n            const triggers = document.querySelectorAll('.add_level');\n            const root = modal.getRoot();\n            const form = root.find('form');\n            for (let i = 0; i < triggers.length; i++) {\n                triggers[i].addEventListener('click', (event) =>\n                    showModal(event, modal)\n                );\n            }\n            root.on(ModalEvents.save, (event) => submitForm(event, form));\n            form.on('submit', (event) =>\n                submitFormAjax(event, modal, form, contextid)\n            );\n        })\n        // Close modal\n        .then((modal) => {\n            modal.close();\n        });\n};\n\nconst showModal = (event, modal) => {\n    event.preventDefault();\n    let root = modal.getRoot();\n    modal.show();\n    // Adds chapter ID to invoked modal form so we can save to DB\n    root.find('form')\n        .find('input[name=\"chapterid\"]')\n        .val(event.target.parentNode.dataset.cid);\n};\n\nconst get_form = (formdata, contextid) => {\n    if (typeof formdata === 'undefined') {\n        formdata = {};\n    }\n    var params = { jsonformdata: JSON.stringify(formdata) };\n    return Fragment.loadFragment(\n        'block_mission_map',\n        'level_form',\n        contextid,\n        params\n    );\n};\n\nconst submitForm = (event, form) => {\n    event.preventDefault();\n    form.submit();\n};\n\nconst submitFormAjax = (event, modal, form, contextid) => {\n    event.preventDefault();\n\n    let formData = form.serialize();\n    Ajax.call([\n        {\n            methodname: 'block_mission_map_create_level',\n            args: {\n                contextid: contextid,\n                jsonformdata: JSON.stringify(formData),\n            },\n            done: (data) => handleFormSubmissionResponse(data, modal),\n            fail: (data) => handleFormSubmissionFailure(data, modal),\n        },\n    ]);\n};\n\nconst handleFormSubmissionFailure = (data, modal) => {\n    modal.hide();\n    Notification.alert('Warning', JSON.parse(data), 'Continue');\n};\n\n/**\n *   level {\n *       id: 0,\n *       chapterid: 0,\n *       parentlevelid: 0,\n *       name: 'LevelName',\n *       url: 'https://levelurl',\n *       timecreated: 0000000000,\n *       timemodified: 0000000000\n *   }\n **/\nconst handleFormSubmissionResponse = (data, modal) => {\n    let level = JSON.parse(data.data);\n    let context = {\n        id: level.id,\n        chapterid: level.chapterid,\n        name: level.name,\n        url: level.url,\n    };\n\n    const chapter = document.querySelector(`[data-cid=\"${level.chapterid}\"]`);\n\n    Template.render('block_mission_map/level', context)\n        .then((html, js) => {\n            Template.appendNodeContents(chapter, html, js);\n            modal.hide();\n        })\n        .fail((ex) => {\n            Notification.alert('Warning', ex, 'Continue');\n        });\n};\n"],"file":"levels.min.js"}