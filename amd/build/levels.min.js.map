{"version":3,"file":"levels.min.js","sources":["../src/levels.js"],"sourcesContent":["/* eslint-disable */\ndefine([\n    'jquery',\n    'core/str',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/fragment',\n    'core/ajax',\n    'core/notification',\n    'core/templates',\n], function (\n    $,\n    Str,\n    ModalFactory,\n    ModalEvents,\n    Fragment,\n    Ajax,\n    Notification,\n    Template\n) {\n    var CreateLevel = function (params) {\n        const { contextid, blockid, courseid, sections } = params;\n\n        this.contextid = contextid;\n\n        document.addEventListener('click', (event) => {\n            if (\n                (event.target &&\n                    event.target.classList.contains('add_level')) ||\n                event.target.id == 'add_level'\n            ) {\n                event.preventDefault();\n\n                this.init(event, blockid, courseid, sections);\n            }\n        });\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    CreateLevel.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    CreateLevel.prototype.contextid = -1;\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    CreateLevel.prototype.modal = null;\n\n    CreateLevel.prototype.init = function (event, blockid, courseid, sections) {\n        const formdata = {\n            chapterid: event.target.dataset.cid,\n            blockid: blockid,\n            courseid: courseid,\n            sections: sections,\n        };\n\n        return Str.get_string('add_level', 'block_mission_map')\n            .then(\n                function (title) {\n                    // Create the modal.\n                    return ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: title,\n                        body: this.getBody(formdata),\n                    });\n                }.bind(this)\n            )\n            .then(\n                function (modal) {\n                    // Keep a reference to the modal.\n                    this.modal = modal;\n\n                    // We want to reset the form every time it is opened.\n                    this.modal.getRoot().on(\n                        ModalEvents.hidden,\n                        function () {\n                            this.modal.setBody(this.getBody(formdata));\n                        }.bind(this)\n                    );\n\n                    // We want to hide the submit buttons every time it is opened.\n                    this.modal.getRoot().on(\n                        ModalEvents.shown,\n                        function () {\n                            this.modal\n                                .getRoot()\n                                .append(\n                                    '<style>[data-fieldtype=submit] { display: none ! important; }</style>'\n                                );\n                        }.bind(this)\n                    );\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    this.modal\n                        .getRoot()\n                        .on(ModalEvents.save, this.submitForm.bind(this));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    this.modal\n                        .getRoot()\n                        .on('submit', 'form', this.submitFormAjax.bind(this));\n\n                    this.modal.show();\n\n                    return this.modal;\n                }.bind(this)\n            );\n    };\n\n    CreateLevel.prototype.getBody = function (formdata) {\n        if (typeof formdata === 'undefined') {\n            formdata = {};\n        }\n\n        // Get the content of the modal.\n        var params = { jsonformdata: JSON.stringify(formdata) };\n\n        return Fragment.loadFragment(\n            'block_mission_map',\n            'level_form',\n            this.contextid,\n            params\n        );\n    };\n\n    CreateLevel.prototype.handleFormSubmissionResponse = function (data) {\n        let level = JSON.parse(data.data);\n        let context = {\n            id: level.id,\n            chapterid: level.chapterid,\n            name: level.name,\n            url: level.url,\n        };\n\n        const chapter = document.querySelector(\n            `[data-cid=\"${level.chapterid}\"]`\n        );\n\n        Template.render('block_mission_map/dot', context)\n            .then((html, js) => {\n                Template.appendNodeContents(chapter, html, js);\n                this.modal.hide();\n            })\n            .fail((ex) => {\n                Notification.alert('Warning', ex, 'Continue');\n            });\n\n        this.modal.hide();\n    };\n\n    CreateLevel.prototype.handleFormSubmissionFailure = function (data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     *\n     * @private\n     *\n     * @param {Event} e Form submission event.\n     */\n    CreateLevel.prototype.submitFormAjax = function (e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        var changeEvent = document.createEvent('HTMLEvents');\n        changeEvent.initEvent('change', true, true);\n\n        // Prompt all inputs to run their validation functions.\n        // Normally this would happen when the form is submitted, but\n        // since we aren't submitting the form normally we need to run client side\n        // validation.\n        this.modal\n            .getRoot()\n            .find(':input')\n            .each(function (index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        var invalid = $.merge(\n            this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n            this.modal.getRoot().find('.error')\n        );\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return;\n        }\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([\n            {\n                methodname: 'block_mission_map_create_level',\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData),\n                },\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData),\n            },\n        ]);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    CreateLevel.prototype.submitForm = function (e) {\n        e.preventDefault();\n\n        this.modal.getRoot().find('form').submit();\n    };\n\n    return {\n        init: function (params) {\n            return new CreateLevel(params);\n        },\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Notification","Template","CreateLevel","params","contextid","blockid","courseid","sections","document","addEventListener","event","target","classList","contains","id","preventDefault","init","prototype","modal","formdata","chapterid","dataset","cid","get_string","then","title","create","type","types","SAVE_CANCEL","body","this","getBody","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","show","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","data","level","parse","context","name","url","chapter","querySelector","render","html","js","appendNodeContents","hide","fail","ex","alert","handleFormSubmissionFailure","e","changeEvent","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","submit"],"mappings":"AACAA,kCAAO,CACH,SACA,WACA,qBACA,oBACA,gBACA,YACA,oBACA,mBACD,SACCC,EACAC,IACAC,aACAC,YACAC,SACAC,KACAC,aACAC,cAEIC,YAAc,SAAUC,cAClBC,UAAEA,UAAFC,QAAaA,QAAbC,SAAsBA,SAAtBC,SAAgCA,UAAaJ,YAE9CC,UAAYA,UAEjBI,SAASC,iBAAiB,SAAUC,SAE3BA,MAAMC,QACHD,MAAMC,OAAOC,UAAUC,SAAS,cACjB,aAAnBH,MAAMC,OAAOG,MAEbJ,MAAMK,sBAEDC,KAAKN,MAAOL,QAASC,SAAUC,sBAShDL,YAAYe,UAAUC,MAAQ,KAM9BhB,YAAYe,UAAUb,WAAa,EAMnCF,YAAYe,UAAUC,MAAQ,KAE9BhB,YAAYe,UAAUD,KAAO,SAAUN,MAAOL,QAASC,SAAUC,gBACvDY,SAAW,CACbC,UAAWV,MAAMC,OAAOU,QAAQC,IAChCjB,QAASA,QACTC,SAAUA,SACVC,SAAUA,iBAGPZ,IAAI4B,WAAW,YAAa,qBAC9BC,KACG,SAAUC,cAEC7B,aAAa8B,OAAO,CACvBC,KAAM/B,aAAagC,MAAMC,YACzBJ,MAAOA,MACPK,KAAMC,KAAKC,QAAQb,aAEzBc,KAAKF,OAEVP,KACG,SAAUN,mBAEDA,MAAQA,WAGRA,MAAMgB,UAAUC,GACjBtC,YAAYuC,OACZ,gBACSlB,MAAMmB,QAAQN,KAAKC,QAAQb,YAClCc,KAAKF,YAINb,MAAMgB,UAAUC,GACjBtC,YAAYyC,MACZ,gBACSpB,MACAgB,UACAK,OACG,0EAEVN,KAAKF,YAKNb,MACAgB,UACAC,GAAGtC,YAAY2C,KAAMT,KAAKU,WAAWR,KAAKF,YAE1Cb,MACAgB,UACAC,GAAG,SAAU,OAAQJ,KAAKW,eAAeT,KAAKF,YAE9Cb,MAAMyB,OAEJZ,KAAKb,OACde,KAAKF,QAInB7B,YAAYe,UAAUe,QAAU,SAAUb,eACd,IAAbA,WACPA,SAAW,QAIXhB,OAAS,CAAEyC,aAAcC,KAAKC,UAAU3B,kBAErCrB,SAASiD,aACZ,oBACA,aACAhB,KAAK3B,UACLD,SAIRD,YAAYe,UAAU+B,6BAA+B,SAAUC,UACvDC,MAAQL,KAAKM,MAAMF,KAAKA,MACxBG,QAAU,CACVtC,GAAIoC,MAAMpC,GACVM,UAAW8B,MAAM9B,UACjBiC,KAAMH,MAAMG,KACZC,IAAKJ,MAAMI,WAGTC,QAAU/C,SAASgD,mCACPN,MAAM9B,iBAGxBnB,SAASwD,OAAO,wBAAyBL,SACpC5B,MAAK,CAACkC,KAAMC,MACT1D,SAAS2D,mBAAmBL,QAASG,KAAMC,SACtCzC,MAAM2C,UAEdC,MAAMC,KACH/D,aAAagE,MAAM,UAAWD,GAAI,oBAGrC7C,MAAM2C,QAGf3D,YAAYe,UAAUgD,4BAA8B,SAAUhB,WAGrD/B,MAAMmB,QAAQN,KAAKC,QAAQiB,QAYpC/C,YAAYe,UAAUyB,eAAiB,SAAUwB,GAE7CA,EAAEnD,qBAEEoD,YAAc3D,SAAS4D,YAAY,cACvCD,YAAYE,UAAU,UAAU,GAAM,QAMjCnD,MACAgB,UACAoC,KAAK,UACLC,MAAK,SAAUC,MAAOC,SACnBA,QAAQC,cAAcP,oBAI1BQ,QAAUjF,EAAEkF,MACZ7C,KAAKb,MAAMgB,UAAUoC,KAAK,yBAC1BvC,KAAKb,MAAMgB,UAAUoC,KAAK,cAI1BK,QAAQE,OACRF,QAAQG,QAAQC,iBAKhBC,SAAWjD,KAAKb,MAAMgB,UAAUoC,KAAK,QAAQW,YAGjDlF,KAAKmF,KAAK,CACN,CACIC,WAAY,iCACZC,KAAM,CACFhF,UAAW2B,KAAK3B,UAChBwC,aAAcC,KAAKC,UAAUkC,WAEjCK,KAAMtD,KAAKiB,6BAA6Bf,KAAKF,MAC7C+B,KAAM/B,KAAKkC,4BAA4BhC,KAAKF,KAAMiD,eAY9D9E,YAAYe,UAAUwB,WAAa,SAAUyB,GACzCA,EAAEnD,sBAEGG,MAAMgB,UAAUoC,KAAK,QAAQgB,UAG/B,CACHtE,KAAM,SAAUb,eACL,IAAID,YAAYC"}