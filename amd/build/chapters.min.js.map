{"version":3,"sources":["../src/chapters.js"],"names":["init","params","contextid","blockid","courseid","ModalFactory","create","type","types","SAVE_CANCEL","title","body","get_form","then","modal","trigger","document","getElementById","root","getRoot","form","find","addEventListener","event","showModal","on","ModalEvents","save","submitForm","submitFormAjax","close","formdata","jsonformdata","JSON","stringify","Fragment","loadFragment","preventDefault","show","val","submit","formData","serialize","Ajax","call","methodname","args","done","data","handleFormSubmissionResponse","fail","handleFormSubmissionFailure","Notification","alert","parse","map","chapter","context","id","name","Template","render","html","js","appendNodeContents","hide","ex"],"mappings":"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","sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Template from 'core/templates';\n\n// The function called from the Mustache template.\nexport const init = (params) => {\n    const { contextid, blockid, courseid } = params;\n    // Set up a SAVE_CANCEL modal.\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'Add Chapter',\n        body: get_form(null, contextid),\n    })\n        // Set up the listeners\n        .then((modal) => {\n            const trigger = document.getElementById('add_chapter');\n            const root = modal.getRoot();\n            const form = root.find('form');\n            trigger.addEventListener('click', (event) =>\n                showModal(event, modal, blockid, courseid)\n            );\n            root.on(ModalEvents.save, (event) => submitForm(event, form));\n            form.on('submit', (event) =>\n                submitFormAjax(event, modal, form, contextid)\n            );\n        })\n        // Close modal\n        .then((modal) => {\n            modal.close();\n        });\n};\n\nconst get_form = (formdata, contextid) => {\n    if (typeof formdata === 'undefined') {\n        formdata = {};\n    }\n    var params = { jsonformdata: JSON.stringify(formdata) };\n    return Fragment.loadFragment(\n        'block_mission_map',\n        'chapter_form',\n        contextid,\n        params\n    );\n};\n\nconst showModal = (event, modal, blockid, courseid) => {\n    event.preventDefault();\n    modal.show();\n    let root = modal.getRoot();\n    root.find('form').find('input[name=\"blockid\"]').val(blockid);\n    root.find('form').find('input[name=\"courseid\"]').val(courseid);\n};\n\nconst submitForm = (event, form) => {\n    event.preventDefault();\n    form.submit();\n};\n\nconst submitFormAjax = (event, modal, form, contextid) => {\n    event.preventDefault();\n\n    // var changeEvent = document.createEvent('HTMLEvents');\n    // changeEvent.initEvent('change', true, true);\n\n    // form.find(':input').each((element) => {\n    //     element.dispatchEvent(changeEvent);\n    // });\n\n    let formData = form.serialize();\n    Ajax.call([\n        {\n            methodname: 'block_mission_map_create_chapter',\n            args: {\n                contextid: contextid,\n                jsonformdata: JSON.stringify(formData),\n            },\n            done: (data) => handleFormSubmissionResponse(data, modal),\n            fail: (data) => handleFormSubmissionFailure(data),\n        },\n    ]);\n};\n\nconst handleFormSubmissionFailure = (data) => {\n    Notification.alert('Warning', JSON.parse(data), 'Continue');\n};\n\n/**\n *   chapter {\n *       id: 0,\n *       name: 'ChapterName',\n *       timecreated: 0000000000,\n *       timemodified: 0000000000\n *   }\n **/\nconst handleFormSubmissionResponse = (data, modal) => {\n    const map = document.getElementById('mission_map');\n    let chapter = JSON.parse(data.data);\n    let context = {\n        id: chapter.id,\n        name: chapter.name,\n    };\n\n    Template.render('block_mission_map/chapter', context)\n        .then((html, js) => {\n            Template.appendNodeContents(map, html, js);\n            modal.hide();\n        })\n        .fail((ex) => {\n            Notification.alert('Warning', ex, 'Continue');\n        });\n};\n"],"file":"chapters.min.js"}