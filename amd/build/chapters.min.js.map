{"version":3,"sources":["../src/chapters.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Notification","Template","CreateChapter","params","contextid","blockid","courseid","document","addEventListener","event","target","classList","contains","id","preventDefault","init","prototype","modal","formdata","chapterid","dataset","cid","name","cname","has_lock","haslock","unlocking_date","unlock","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","show","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","data","map","getElementById","chapter","parse","updated","location","reload","context","render","html","js","appendNodeContents","hide","fail","ex","alert","handleFormSubmissionFailure","e","changeEvent","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","submit"],"mappings":"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","sourcesContent":["/* eslint-disable */\ndefine([\n        'jquery',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'core/notification',\n        'core/templates'],\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Notification, Template) {\n\n        var CreateChapter = function(params) {\n            const {contextid, blockid, courseid} = params;\n\n            this.contextid = contextid;\n\n            document.addEventListener('click', (event) => {\n                if (\n                    (event.target && event.target.classList.contains('edit_chapter')) ||\n                    event.target.id == 'add_chapter'\n                ) {\n                    event.preventDefault();\n\n                    this.init(event, blockid, courseid);\n                }\n            });\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        CreateChapter.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        CreateChapter.prototype.contextid = -1;\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        CreateChapter.prototype.modal = null;\n\n        CreateChapter.prototype.init = function(event, blockid, courseid) {\n            const formdata = {\n                chapterid: event.target.dataset.cid,\n                blockid: blockid,\n                courseid: courseid,\n                name: event.target.dataset.cname,\n                has_lock: event.target.dataset.haslock,\n                unlocking_date: event.target.dataset.unlock,\n            };\n\n            return Str.get_string('add_chapter', 'block_mission_map').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody(formdata)\n                });\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody(formdata));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                this.modal.show();\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        CreateChapter.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('block_mission_map', 'chapter_form', this.contextid, params);\n        };\n\n        CreateChapter.prototype.handleFormSubmissionResponse = function(data) {\n            const map = document.getElementById('mission_map');\n            let chapter = JSON.parse(data.data);\n\n            if (chapter.updated == true) {\n                // Ugly hack because TIME\n                location.reload();\n            } else {\n                let context = {\n                    id: chapter.id,\n                    name: chapter.name,\n                };\n\n                Template.render('block_mission_map/chapter', context)\n                    .then((html, js) => {\n                        Template.appendNodeContents(map, html, js);\n                        this.modal.hide();\n                    })\n                    .fail((ex) => {\n                        Notification.alert('Warning', ex, 'Continue');\n                    });\n            }\n\n            this.modal.hide();\n        };\n\n        CreateChapter.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         *\n         * @private\n         *\n         * @param {Event} e Form submission event.\n         */\n        CreateChapter.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'block_mission_map_create_chapter',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        CreateChapter.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(params) {\n                return new CreateChapter(params);\n            }\n        };\n    }\n);\n"],"file":"chapters.min.js"}